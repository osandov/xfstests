#! /bin/bash
# SPDX-License-Identifier: GPL-2.0
# Copyright (c) 2020 Facebook.  All Rights Reserved.
#
# FS QA Test 593
#
# Smoke test linkat() with AT_LINK_REPLACE.
#
seq=`basename $0`
seqres=$RESULT_DIR/$seq
echo "QA output created by $seq"

here=`pwd`
tmp=/tmp/$$
status=1	# failure is the default!
trap "_cleanup; exit \$status" 0 1 2 3 15

_cleanup()
{
	cd /
	rm -f $tmp.*
}

# get standard environment, filters and checks
. ./common/rc
. ./common/filter

# remove previous $seqres.full before test
rm -f $seqres.full

_supported_fs generic
_supported_os Linux
_require_test
_require_xfs_io_command "-T"
_require_xfs_io_command "flink" "-f"

same_file() {
	[[ "$(stat -c '%d %i' "$1")" = "$(stat -c '%d %i' "$2")" ]]
}

touch "$TEST_DIR/$seq.src"
touch "$TEST_DIR/$seq.tgt"
$XFS_IO_PROG -c "flink -f $TEST_DIR/$seq.tgt" "$TEST_DIR/$seq.src"
same_file "$TEST_DIR/$seq.src" "$TEST_DIR/$seq.tgt" ||
	echo "Target was not replaced"

# Linking to the same file should be a noop.
$XFS_IO_PROG -c "flink -f $TEST_DIR/$seq.src" "$TEST_DIR/$seq.src"
$XFS_IO_PROG -c "flink -f $TEST_DIR/$seq.tgt" "$TEST_DIR/$seq.src"
same_file "$TEST_DIR/$seq.src" "$TEST_DIR/$seq.tgt" || echo "Target changed?"

# Should work with O_TMPFILE.
$XFS_IO_PROG -c "flink -f $TEST_DIR/$seq.tgt" -T "$TEST_DIR"
stat -c '%h' "$TEST_DIR/$seq.tgt"
same_file "$TEST_DIR/$seq.src" "$TEST_DIR/$seq.tgt" &&
	echo "Target was not replaced"

# It's okay if the target doesn't exist.
$XFS_IO_PROG -c "flink -f $TEST_DIR/$seq.tgt2" "$TEST_DIR/$seq.src"
same_file "$TEST_DIR/$seq.src" "$TEST_DIR/$seq.tgt2" ||
	echo "Target was not created"

# Can't replace directories.
mkdir "$TEST_DIR/$seq.dir"
$XFS_IO_PROG -c "flink -f $TEST_DIR/$seq.dir" "$TEST_DIR/$seq.src"
cd "$TEST_DIR/$seq.dir"
$XFS_IO_PROG -c "flink -f ." "$TEST_DIR/$seq.src"
$XFS_IO_PROG -c "flink -f .." "$TEST_DIR/$seq.src"
cd - &> /dev/null

# Can't replace local mount points.
touch "$TEST_DIR/$seq.mnt"
$MOUNT_PROG --bind "$TEST_DIR/$seq.mnt" "$TEST_DIR/$seq.mnt"
$XFS_IO_PROG -c "flink -f $TEST_DIR/$seq.mnt" "$TEST_DIR/$seq.src"

# Can replace mount points in other namespaces, though.
unshare -m \
	bash -c "$UMOUNT_PROG $TEST_DIR/$seq.mnt; $XFS_IO_PROG -c \"flink -f $TEST_DIR/$seq.mnt\" $TEST_DIR/$seq.src"
if $UMOUNT_PROG "$TEST_DIR/$seq.mnt" &> /dev/null; then
	echo "Mount point was not detached"
fi
same_file "$TEST_DIR/$seq.src" "$TEST_DIR/$seq.mnt" ||
	echo "Mount point was not replaced"

# Should replace symlinks, not follow them.
touch "$TEST_DIR/$seq.symtgt"
ln -s "$TEST_DIR/$seq.symtgt" "$TEST_DIR/$seq.sym"
$XFS_IO_PROG -c "flink -f $TEST_DIR/$seq.sym" "$TEST_DIR/$seq.src"
same_file "$TEST_DIR/$seq.src" "$TEST_DIR/$seq.sym" ||
	echo "Symlink was not replaced"
same_file "$TEST_DIR/$seq.src" "$TEST_DIR/$seq.symtgt" &&
	echo "Symlink target was replaced"

rm -rf "$TEST_DIR/$seq."*

status=0
exit
